name: Security Checks

on:
  schedule:
    - cron: '0 6 * * 1'  # Run every Monday at 6 AM UTC
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Dependency Vulnerability Scanning
  dependency-scan:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Snyk to check for vulnerabilities (Backend)
      if: matrix.component == 'backend'
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=backend/requirements.txt --severity-threshold=high
    
    - name: Run Snyk to check for vulnerabilities (Frontend)
      if: matrix.component == 'frontend'
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=frontend/package.json --severity-threshold=high

  # SAST (Static Application Security Testing)
  sast-scan:
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, python
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Secret Scanning
  secret-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Docker Image Security Scanning
  docker-security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t myguide-${{ matrix.service }}:latest ./${{ matrix.service }}
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'myguide-${{ matrix.service }}:latest'
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-${{ matrix.service }}.sarif'

  # License Compliance Check
  license-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Python licenses
      run: |
        cd backend
        pip install pip-licenses
        pip-licenses --format=json --output-file=licenses.json
        # Add license compliance checks here
    
    - name: Check Node.js licenses
      run: |
        cd frontend
        npm install -g license-checker
        license-checker --json --out licenses.json
        # Add license compliance checks here