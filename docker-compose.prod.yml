version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: myguide_db_prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: myguide_redis_prod
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  # Django Backend
  backend:
    build:
      context: ./backend
      target: production
    container_name: myguide_backend_prod
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    volumes:
      - media_files:/app/media
      - static_files:/app/static
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  # Celery Worker
  celery:
    build:
      context: ./backend
      target: production
    container_name: myguide_celery_prod
    command: celery -A myguide_backend worker -l info --concurrency=2
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - media_files:/app/media
    restart: unless-stopped
    depends_on:
      - db
      - redis
      - backend
    networks:
      - backend

  # Celery Beat
  celery-beat:
    build:
      context: ./backend
      target: production
    container_name: myguide_celery_beat_prod
    command: celery -A myguide_backend beat -l info
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    restart: unless-stopped
    depends_on:
      - db
      - redis
      - backend
    networks:
      - backend

  # React Frontend
  frontend:
    build:
      context: ./frontend
      target: production
    container_name: myguide_frontend_prod
    restart: unless-stopped
    networks:
      - frontend

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: myguide_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_files:/var/www/static
      - media_files:/var/www/media
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    networks:
      - frontend
      - backend

volumes:
  postgres_data:
  redis_data:
  media_files:
  static_files:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge